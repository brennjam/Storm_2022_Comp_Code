// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DefaultDrive extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax leftFront;
private CANSparkMax leftBack;
private MotorControllerGroup leftDriveTrain;
private CANSparkMax rightFront;
private CANSparkMax rigthBack;
private MotorControllerGroup rightDriveTrain;
private DifferentialDrive differentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DefaultDrive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftFront = new CANSparkMax(4, MotorType.kBrushless);
 
 leftFront.restoreFactoryDefaults();  
leftFront.setInverted(false);
leftFront.setIdleMode(IdleMode.kCoast);
  

leftBack = new CANSparkMax(3, MotorType.kBrushless);
 
 leftBack.restoreFactoryDefaults();  
leftBack.setInverted(false);
leftBack.setIdleMode(IdleMode.kCoast);
  

leftDriveTrain = new MotorControllerGroup(leftFront, leftBack  );
 addChild("LeftDriveTrain",leftDriveTrain);
 

rightFront = new CANSparkMax(1, MotorType.kBrushless);
 
 rightFront.restoreFactoryDefaults();  
rightFront.setInverted(true);
rightFront.setIdleMode(IdleMode.kCoast);
  

rigthBack = new CANSparkMax(2, MotorType.kBrushless);
 
 rigthBack.restoreFactoryDefaults();  
rigthBack.setInverted(true);
rigthBack.setIdleMode(IdleMode.kCoast);
  

rightDriveTrain = new MotorControllerGroup(rightFront, rigthBack  );
 addChild("RightDriveTrain",rightDriveTrain);
 

differentialDrive1 = new DifferentialDrive(leftDriveTrain, rightDriveTrain);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
public void my_DriveMotors(double LeftSpeed, double RightSpeed){
    differentialDrive1.tankDrive(LeftSpeed, RightSpeed);
}

public void my_DriveMotorsarcade(double forward, double turn){
    differentialDrive1.arcadeDrive(forward, turn);
}
    
}

